<?php
namespace App\Traits;

use App\Departamento;
use App\Emails;
use App\Models\MAttr;
use App\Models\MCategoryField;
use App\Models\MProduct;
use App\Models\MProductIns;
use App\TipoDoc;

trait ManageModules {
    private $default_fields;
    public function getDefaultFields()
    {
        if (!$this->default_fields) {
            $attrs = MAttr::select("id", "name", "is_detail")->get();
            $data = [];
            $attrs->each(function ($item, $key) use (&$data) {
                $pref = $item->is_detail==1?"":"_";
                $data[$pref.$item->name] = "_".$item->id;
            });
            $this->default_fields = $data;
        }
        return $this->default_fields;
    }

    public function inscritosLead($m_category_id, $m_product_id, $g, $s, $campos){
        $df = $this->getDefaultFields();
        return MProductIns::where("m_category_id", $m_category_id)
            ->where("m_product_id", $m_product_id)
            ->when( $g, function ($query) use($g, $df) {
                //$query->whereJsonContains("data", ["_15"=>$g]);
                $query->where("data->{$df['grupo']}", $g);
                //
            })
            ->when( $s, function ($query) use($s, $campos, $df) {
                $field_names = [$df['grupo'], $df['nom'], $df['apepat'],$df['apemat']];
                $s = str_replace(" ", "%", $s);
                $query->where(function($q) use($campos, $field_names, $s, $df ) {
                    $q->orWhere(\DB::raw('concat(data->"$.'.$df['nom'].'"," ", data->"$.'.$df['apepat'].'"," ", data->"$.'.$df['apemat'].'")'), 'LIKE' , '%'.$s.'%');
                    foreach($campos as $c){
                        if(!in_array($c->field, $field_names)){
                            $q->orWhere("data->".$c->field, "LIKE", '%'.$s.'%');
                        }
                    }
                });
//                $query->where(DB::raw('concat(data->"$._13"," ", data->"$._14"," ", data->"$._15")'), 'LIKE' , '%'.$s.'%');
//                foreach($campos as $c){
//                    if(!in_array($c->field, $field_names)){
//                        $query->orWhere("data->".$c->field, "LIKE", '%'.$s.'%');
//                    }
//                }
                //
            });
    }

    public function getDepartaments(){
        return Departamento::select('ubigeo_id','nombre' )
            ->whereIn('ubigeo_id', ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25'])
            ->get();
    }

    public function getExpData(){
        $companytypes = ["PRIVADA", "ESTATAL"];
        $modalities = ["CONTRATO DE LOCACIÓN DE SERVICIOS", "CAS", "CAP"];
        $cargos = ["GERENTE EN EL SISTEMA DE CONTROL GUBERNAMENTAL", "GERENTE EN LA ADMINISTRACIÓN PÚBLICA", "GERENTE EN EL SECTOR PRIVADO",
            "JEFATURAS", "OTROS COMPETENTE A SU PROFESIÓN"];
        $emptyExp = ["empresa"=>"", "tipo"=>"", "puesto"=>"", "modalidad"=>"", "actividad"=>"", "inicio"=>"", "termino"=>""];
        $filesizes = ["1 MB", "10 MB", "100 MB", "1 GB", "10 GB"];
        $filetypes = ["document"=>"Documento", "presentation"=>"Presentación", "sheet"=>"Hoja de Cálculo", "draw"=>"Dibujo",
            "pdf"=>"PDF", "image"=>"Imagen", "video"=>"Video", "audio"=>"Audio"];
        $filetypesAceept = ["document"=>".doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document, text/plain",
            "presentation"=>"application/vnd.ms-powerpoint", "sheet"=>".xlsx,.xls,application/vnd.ms-excel", "draw"=>"image/x-dwg,image/x-dxf,drawing/x-dwf",
            "pdf"=>".pdf", "image"=>"image/*", "video"=>"video/*", "audio"=>"audio/*"];
        return compact( "companytypes", "modalities", "cargos", "emptyExp", "filesizes", "filetypes", "filetypesAceept");
    }
    public function getValuesElements()
    {
        $doctypes = TipoDoc::select(["id", "tipo_doc as name"])->get();
        $groups = \DB::table('est_grupos')->select([/*"id", */"codigo as id", "nombre as name"])->get();
        $countries = \DB::table('country')->select('name', 'phonecode','nicename')->get();
        $domains = \DB::table('tb_email_permitos')->select(["id", "nombre as name", "dominio as domain"])->get();
        $emails = Emails::select(["id", "nombre as name", "email"])->orderBy("nombre",'asc')->get();
        $departments = $this->getDepartaments();
        $exp = $this->getExpData();
        return compact("doctypes", "groups", "countries", "domains", "emails", "departments", "exp");
    }

    public function getRecIns($m_category_id)
    {
        $campos = MCategoryField::where("m_category_id", $m_category_id)->orderBy("position")->get();
        $recs = $campos->where("is_detail", 0)??[];
        $ins = $campos->where("is_detail", 1)??[];
        return [$recs, $ins];
    }
    public function getProductArray($id){
        $data = [];
        $product = [];
        $visible = [];
        if($id>0){
            $product = MProduct::find($id)->toArray()?? [];
            if( count($product) > 0 ){
                $data = json_decode($product["data"], true);
                $visible = json_decode($product["visible"], true);
            }
        }
        return compact("product", "data", "visible");
    }
    public function getProductArrayData($id){
        $data = [];
        if($id>0){
            $d = MProduct::find($id)->toArray()?? [];
            $data = count($d) > 0 ? json_decode($d["data"], true) : [];
        }
        return $data;
    }
    public function getInsArrayData($m_product_id, $id){
        $data = [];
        if($id>0){
            $d = MProductIns::firstWhere(compact("m_product_id", "id"))->toArray()?? [];
            $data = count($d) > 0 ? json_decode($d["data"], true) : [];
        }
        return $data;
    }


    public function inputsForSave($recs, $inputs, $request, $m_category_id, $product_data, $id)
    {
        $data = [];
        $if = 0;
        $emailcodes = false;
        foreach($recs as $c){
            $m_field_id = $c["m_field_id"];
            $visible = $c["visible"];
            $m_attr_id = $c["m_attr_id"];
            $m_field = $c["field"];
            $_id = $c["id"];// = $m_attr_id

            $value = array_key_exists($_id, $inputs)?$inputs[$_id]:"";
            if($m_field_id == 3){//Int
                $value0 = intval($value);
                $value1 = floatval($value);
                $value = ($value0 == $value1) ? $value0: $value1;
            }elseif($m_field_id == 4){//Email
                if($value==""){
                    $value1 = array_key_exists($_id."-email", $inputs)?$inputs[$_id."-email"]:"";
                    $value2 = array_key_exists($_id."-domain", $inputs)?$inputs[$_id."-domain"]:"";
                    if($value1!="")$value = "{$value1}{$value2}";
                }
            }
            elseif($m_field_id == 7){//Fecha
                $value2 = intval(preg_replace('/(\d{2})[\/-]?(\d{2})[\/-]?(\d{4})/', "$3$2$1", $value));
                if($value2>0)$value = $value2;
            }
            elseif($m_field_id == 15){//File
                if($file = $request->file("inputs.{$_id}")){
                    $path = "images/m_{$m_category_id}";
                    $valueOld = array_key_exists($m_field, $product_data)?$product_data[$m_field]:"";
                    if($valueOld!="" && file_exists("{$path}/{$valueOld}"))
                        unlink("{$path}/{$valueOld}");
                    //$name = $file->getClientOriginalName();
                    $name = $m_category_id.'_'.strtotime('now').$if.'.'.$file->getClientOriginalExtension();
                    $file->move( $path,$name);
                    $value = $name;
                    $if++;
                }else{//value anterior
                    if($id>0)
                        $value = array_key_exists($m_field, $product_data)?$product_data[$m_field]:"";
                }
            } elseif($m_field_id == 17) {//File
                //dd($data);
            }elseif($m_field_id == 18) {//File
                $value = json_encode($value);
                //dd($data);
            }

            $data[$m_field] = $value;
        }
        return $data;
    }

    public function getImageData($product_data, $m_category_id, $field, $path="")
    {
        if($path=="")$path = "images/m_{$m_category_id}";
        $img = array_key_exists($field, $product_data)?$product_data[$field]:"";
        return  $img!="" && file_exists("{$path}/{$img}") ? asset("{$path}/{$img}") :"";
    }




    public function getRequireds($data)
    {
        return $data->filter(function ($item) {
            return $item->required==1;
        })->values() ?? [];
    }
    public function lineJS(&$lines, $tipo, $selectorInput, $selectorContenedor, $ok){
        $ln1 = $selectorInput.'.prop("disabled", true);';
        $ln2 = $selectorContenedor.'.addClass("invisible");';
        $ln3 = $selectorContenedor.'.addClass("d-none");';

        $ln1f = $selectorInput.'.prop("disabled", false);';
        $ln2f = $selectorContenedor.'.removeClass("invisible");';
        $ln3f = $selectorContenedor.'.removeClass("d-none");';

        if($ok){
            if($tipo == 1) array_push($lines, $ln1);
            elseif($tipo == 2) array_push($lines, $ln2, $ln1);
            elseif($tipo == 3) array_push($lines, $ln3, $ln1);
        }else{
            if($tipo == 1) array_push($lines, $ln1f);
            elseif($tipo == 2) array_push($lines, $ln2f, $ln1f);
            elseif($tipo == 3) array_push($lines, $ln3f, $ln1f);
        }
    }
    public function getJSEvent($m_field_id){
        if(in_array($m_field_id, [5, 6, 13, 14]))return "click";
        elseif(in_array($m_field_id, [11, 12, 15]))return "change";
        return "keyup";
    }
    public function getJSData($data, $prefContenedor, $prefInput){
        $editors1 = [];
        $requireds = $this->getRequireds($data);
        $events = [];
        $codes = [];
        $emailcodes = 0;
        if(count($data)>0){
            foreach ($data as $c){
                $oj = $c->oj();
                $m_field_id = $c->m_field_id;
                $event = $this->getJSEvent($m_field_id);
                if($m_field_id==2){
                    $tiene_editor_1 = $oj["ed"] ?? 0;
                    if($tiene_editor_1 == 1){
                        array_push($editors1, "#{$prefInput}{$c->id}");
                    }
                }
                if(count($oj)>0 and isset($oj["flt"]) and count($oj["flt"])>0 and $oj["flt"]["f"] != "" and  $oj["flt"]["e"] >0 and count($oj["flt"]["c"])>0){
                    $lines = [];
                    $value = $oj["flt"]["f"];
                    $e = $oj["flt"]["e"];
                    $fields = $oj["flt"]["c"];
                    $values = explode(",", $value);
                    $cond = [];
                    $condIds = [];
                    if(count($values)>0){
                        foreach($values as $v){
                            $first = substr($v, 0, 1);
                            $operator = "=";
                            if($first=="!"){
                                $v = substr($v, 1);
                                $operator = "!";
                            }
                            $v1 = addslashes($v);
                            array_push($cond, "this.value {$operator}= \"{$v1}\"");
                            array_push($condIds, "\$(\"#{$prefInput}{$c->id}\").val() {$operator}= \"{$v1}\"");
                        }
                    }
                    $selectorInputs = [];
                    $selectorContainers = [];
                    foreach($fields as $x){
                        array_push($selectorInputs, "\"#{$prefInput}{$x}\"");
                        array_push($selectorContainers, "\"#{$prefContenedor}{$x}\"");
                    }
                    $l1 = implode(", ", $selectorInputs);
                    $l2 = implode(", ", $selectorContainers);
                    if($event == 'click'){
                        if($operator!='!')$operator = "";
                        //array_push($lines,"if( {$operator}this. checked ){");
                        array_push($lines,"effS( {$operator}this. checked, {$e}, [{$l1}], [{$l2}]);");
                        array_push($codes,"effS( \$(\"#{$prefInput}{$c->id}\").prop('checked'), {$e}, [{$l1}], [{$l2}]);");

                    }else{
                        //array_push($lines,"if(".implode(" || ", $cond)."){");
                        array_push($lines,"effS( ".implode(" || ", $cond).", {$e}, [{$l1}], [{$l2}]);");
                        array_push($codes,"effS( ".implode(" || ", $condIds).", {$e}, [{$l1}], [{$l2}]);");
                    }


                    foreach($fields as $x){
                        $ct = "\$(\"#{$prefContenedor}{$x}\")";
                        $in = "\$(\"#{$prefInput}{$x}\")";
                        //$this->lineJS($lines, $e, $in, $ct,1);
                    }

                    //array_push($lines, "}else{");

                    foreach($fields as $x){
                        $ct = "\$(\"#{$prefContenedor}{$x}\")";
                        $in = "\$(\"#{$prefInput}{$x}\")";
                        //$this->lineJS($lines, $e, $in, $ct,0);
                    }

                    //array_push($lines, "}");
                    $events[$c->id] = ["lines"=>$lines, "event"=>$event] ;
                }
                // evento correo invalido, campo email
                $dm = $oj["dm"]??0;
                if ($m_field_id == 4){
                    if($dm==1 ){
                        $emailcodes = 1;
                        $code = "\$(\"#inp-{$c->id}-email\").on(\"keyup\", function(){
                            validEmailAaa(this.value, \"#message-{$c->id}\", \"#actionSubmit\");
                    })";
                        array_push($codes, $code);
                    }
                }
            }
        }
        $fe =  $this->getJsStr();
        //if($emailcodes == 1)
            array_unshift($codes, $fe);
        return compact("events", "codes", "editors1");
    }
    function getJsStr(){
        return <<<PHP
function isValidEmail(email) {
  var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
  return emailReg.test( email );
}
function validEmailAaa(email, sel_message, sel_submit){
var sm = $(sel_message);
var sb = $(sel_submit);
  if( !isValidEmail(email)  ) {
    sm.html("").addClass("d-none").removeClass("d-block");
    sb.attr("disabled", false);
  }else{
    sm.html("Lo sentimos, solo se permite el nombre de usuario, sin @dominio.com").addClass("d-block").removeClass("d-none");
    sb.attr("disabled", true);
  }
  if(email.indexOf("@") > -1 || email.indexOf(";") > -1 || email.indexOf(",") > -1){
    sm.html("Lo sentimos, solo se permite el nombre de usuario, sin @dominio.com").addClass("d-block");
    sb.attr("disabled", true);
  }
 }

function eff(cond, t, selInput, selContainer){
    if(cond){
        //DEFECTO
        $(selInput).prop("disabled", true);
        if (t==2){
            $(selContainer).addClass("invisible");
        }else if (t==3){
            $(selContainer).addClass("d-none");
        }
    }else{
        $(selInput).prop("disabled", false);
        if (t==2){
            $(selContainer).removeClass("invisible");
        }else if (t==3){
            $(selContainer).removeClass("d-none");
        }
    }
}
function effS(cond, t, selectors, selectors2){
    if(selectors.length){
        $.each(selectors, function(i, sel){
            eff(cond, t, sel, selectors2[i]);
        });
    }
}
PHP;
    }
}
